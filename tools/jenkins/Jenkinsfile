import jenkins.*
import jenkins.model.*
import hudson.*
import hudson.model.*
import com.cloudbees.hudson.plugins.folder.*
import org.jenkinsci.plugins.workflow.job.WorkflowJob
import groovy.json.JsonSlurper
import groovy.io.FileType

def addFolder = { String folderName ->
    def folder = Jenkins.instance.getItem(folderName)
    if (folder == null) {
        folder = Jenkins.instance.createProject(Folder.class, folderName)
        println 'Folder Created!'
    } else {
        if (folder.getClass() != Folder.class) {
            folder = Jenkins.instance.createProject(Folder.class, folderName)
            println 'Folder Created!'
        } else {
            println 'Folder already exists!'
        }
    }
    return folderName
}

pipeline {
    agent {
        kubernetes {
            label 'maven'
            cloud 'openshift'
            defaultContainer 'jnlp'
            serviceAccount 'jenkins'
            yaml """
              kind: Pod
              metadata:
                name: jenkins-slave
              spec:
                containers:
                - name: jnlp
                  image: registry.access.redhat.com/openshift3/jenkins-agent-maven-35-rhel7
                  privileged: false
                  alwaysPullImage: false
                  workingDir: /tmp
                  ttyEnabled: false
                  volumeMounts:
                  - mountPath: '/home/jenkins/.m2'
                    name: pvc
                volumes:
                - name: pvc
                  persistentVolumeClaim:
                    claimName: 'maven-slave-pvc'
            """
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '', numToKeepStr: '3'))
    }

    environment {
        APP_NAME = 'student-grad-tools'
    }

    parameters {
        choice(
            choices: ['TEMP', 'DEV', 'TEST', 'UAT', 'PROD'],
            name: 'ENVRNMNT'
        )
    }

    stages {
        stage ('Init') {
            steps {
                script {
                    println "Environment Selected => ${env.ENVRNMNT}"
                }
            }
            post {
                success {
                    echo 'Init Success'
                }
                failure {
                    echo 'Init Failed'
                }
            }
        }
        stage ('Add-Folder') {
            steps {
                script {
                    addFolder(env.ENVRNMNT)
                }
            }
            post {
                success {
                    echo 'Folder added Successfully'
                }
                failure {
                    echo 'Failed adding folder'
                }
            }
        }
        stage ('print-apps') {
            steps {
                script {
                    def slurper = new JsonSlurper()
                    def inventory = slurper.parse(
                            "https://raw.githubusercontent.com/bcgov/EDUC-GRAD-TOOLS/main/tools/jenkins/inventory.json".toURL()
                    )

                    def apps = inventory.applications

                    println ''

                    apps.each {
                        app -> println app.name
                    }

                    println ''
                }
            }
        }
    }
    post {
        success {
            println 'Stages Success'
        }
        failure {
            println 'Stages failure'
        }
        always {
            println 'Stages always'
        }
    }
}
