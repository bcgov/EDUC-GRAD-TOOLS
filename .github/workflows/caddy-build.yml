name: CADDY Build

env:
  # üñäÔ∏è EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  # üñäÔ∏è EDIT to set the kube context's namespace after login. Leave blank to use your user's default namespace.
  OPENSHIFT_NAMESPACE: bbe4c3-dev

  # üñäÔ∏è EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.token }}

  IMAGE_NAME: educ-grad-admin-frontend
  DOCKER_ARTIFACTORY_REPO: docker-remote.artifacts.developer.gov.bc.ca
  ARTIFACTORY_REPO: artifacts.developer.gov.bc.ca

  APP_NAME: 'educ-grad-tools'
  REPO_NAME: "educ-grad-tools"
  BRANCH: "main"
  APP_NAME_FRONTEND: "educ-grad-tools"
  NAMESPACE: bbe4c3
  NAMESPACE_TOOLS: bbe4c3-tools
  COMMON_NAMESPACE: 75e61b
  TAG: "latest"
  TARGET_ENV: "dev"

  # SITE_URL should have no scheme or port. It will be prepended with https://
  HOST_ROUTE: ${{ secrets.SITE_URL }}

on:
  workflow_dispatch:

jobs:
  openshift-ci-cd:
    name: CADDY Build
    # ubuntu-20.04 can also be used.
    runs-on: ubuntu-18.04
    environment: dev

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
      - name: Check for required secrets
        uses: actions/github-script@v4
        with:
          script: |
            const secrets = {
              OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
              OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
            };

            const GHCR = "ghcr.io";
            if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
              core.info(`Image registry is ${GHCR} - no registry password required`);
            }
            else {
              core.info("A registry password is required");
              secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
            }

            const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
              if (value.length === 0) {
                core.error(`Secret "${name}" is not set`);
                return true;
              }
              core.info(`‚úîÔ∏è Secret "${name}" is set`);
              return false;
            });

            if (missingSecrets.length > 0) {
              core.setFailed(`‚ùå At least one required secret is not set in the repository. \n` +
                "You can add it using:\n" +
                "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
                "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
                "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
            }
            else {
              core.info(`‚úÖ All the required secrets are set`);
            }

      - name: Check out repository
        uses: actions/checkout@v2

      - name: Determine app name
        if: env.APP_NAME_FRONTEND == ''
        run: |
          echo "APP_NAME_FRONTEND=$(basename $PWD)" | tee -a $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_ARTIFACTORY_REPO }}
          username: ${{ secrets.DOCKER_ARTIFACTORY_USERNAME }}
          password: ${{ secrets.DOCKER_ARTIFACTORY_ACCESS_TOKEN }}

      # https://github.com/redhat-actions/buildah-build#readme
      - name: Build CADDY from Dockerfile
        id: build-image-caddy
        uses: redhat-actions/buildah-build@v2
        with:
          image: grad-caddy
          tags: "v1"

          # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
          # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
          # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
          dockerfiles: |
            ./caddy/.s2i/Dockerfile
          context: ./caddy/.s2i

        # https://github.com/redhat-actions/push-to-registry#readme
      - name: Push CADDY to registry
        id: push-image-caddy
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image-caddy.outputs.image }}
          tags: ${{ steps.build-image-caddy.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.IMAGE_REGISTRY_USER }}
          password: ${{ env.IMAGE_REGISTRY_PASSWORD }}
